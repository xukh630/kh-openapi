<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--  开启注解 -->
    <context:component-scan base-package="com.kh.openapi.service.aop.other"/>
    <!--  开启aop注解方式 -->
    <aop:aspectj-autoproxy/>

    <!-- 横切关注点          对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点-->
    <!-- 切面(aspect)       类是对物体特征的抽象，切面就是对横切关注点的抽象-->                       <!--抽取出来的需要执行的部分公共部分 (所有的方法都要打日志,校验参数)-->
    <!-- 连接点（joinpoint） 被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器-->
    <!-- 切面(aspect)       类是对物体特征的抽象，切面就是对横切关注点的抽象-->
    <!-- 切入点（pointcut）  对连接点进行拦截的定义-->
    <!-- 通知（advice）      所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类-->
    <!-- 目标对象            代理的目标对象-->
    <!-- 织入（weave）       将切面应用到目标对象并导致代理对象创建的过程-->
    <!-- 引入（introduction）在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段-->

    <!-- proxy-target-class="true 强制使用CGLIB生成代理对象 -->


    <bean id="aopTestImpl1" class="com.kh.openapi.service.aop.impl.AopTestImpl1"/>
    <bean id="aopTestImpl2" class="com.kh.openapi.service.aop.impl.AopTestImpl2"/>
    <bean id="timeHandler" class="com.kh.openapi.service.aop.impl.TimeHandler"/>
    <bean id="randomNum" class="com.kh.openapi.service.aop.impl.RandomNum"/>

    <aop:config proxy-target-class="true">
        <aop:aspect id="time" ref="timeHandler" order="1">                      <!--切面-->
            <aop:pointcut id="addAllMethod" expression="execution(* com.kh.openapi.service.aop.AopTest.doPrint(..))"/>
            <aop:before method="printTime" pointcut-ref="addAllMethod"/>        <!--通知-->
            <aop:after method="printDate" pointcut-ref="addAllMethod"/>         <!--通知-->
        </aop:aspect>
        <aop:aspect id="random" ref="randomNum" order="2">
            <aop:pointcut id="allMethod" expression="execution(* com.kh.openapi.service.aop.AopTest.*(..))"/>
            <aop:before method="printNum" pointcut-ref="allMethod"/>
            <aop:after method="printNum" pointcut-ref="allMethod"/>
        </aop:aspect>
    </aop:config>
</beans>
